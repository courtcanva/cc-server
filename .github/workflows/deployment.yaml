# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  pull_request:
    branches:
      - main
permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-southeast-2                  
  ECR_REPOSITORY: cc-backend-dockerimage-repo          
  ECS_SERVICE_UAT: CCS-F-UAT-service                 
  ECS_CLUSTER_UAT: CCS-F-UAT-cluster                
  ECS_TASK_DEFINITION_UAT: arn:aws:ecs:ap-southeast-2:497551902879:task-definition/CCS-F-UAT-task
  ECS_SERVICE_PROD: CCS-F-PROD-service                 
  ECS_CLUSTER_PROD: CCS-F-PROD-cluster                
  ECS_TASK_DEFINITION_PROD: arn:aws:ecs:ap-southeast-2:497551902879:task-definition/CCS-F-PROD-task 
  CONTAINER_NAME_UAT: uat
  CONTAINER_NAME_PROD: prod         

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::245866473499:role/OIDC-ECS-deployment
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 16

    - name: Install dependencies
      run: npm install

    - name: Migrate DB
      run: npm run migrate-up

    - name: Render Amazon ECS task definition for uat container
      id: task-def-uat
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION_UAT }}
        container-name: ${{ env.CONTAINER_NAME_UAT }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition for uat
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_UAT }}
        cluster: ${{ env.ECS_CLUSTER_UAT }}
        wait-for-service-stability: true

    - name: Render Amazon ECS task definition for prod container
      id: task-def-prod
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION_PROD }}
        container-name: ${{ env.CONTAINER_NAME_PROD}}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition for prod
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_PROD }}
        cluster: ${{ env.ECS_CLUSTER_PROD }}
        wait-for-service-stability: true
